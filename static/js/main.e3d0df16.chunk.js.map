{"version":3,"sources":["color.js","App.js","reportWebVitals.js","index.js"],"names":["colorArray","App","useState","quote","setQuote","author","setAuthor","quotesArray","setQuotesArray","color","setColor","console","log","quotesDBUrl","fetchData","a","fetch","response","json","quotes","useEffect","className","style","backgroundColor","id","icon","faQuoteLeft","href","encodeURI","faTwitter","onClick","randomNumber","Math","floor","random","length","randomNumberColor","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+PAqDeA,G,MArDI,CACjB,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,Y,8BC4BaC,MAvEf,WACE,IAEA,EAA0BC,mBAFT,yDAEjB,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA4BF,mBAFV,kBAElB,mBAAOG,EAAP,KAAeC,EAAf,KACA,EAAsCJ,mBAAS,MAA/C,mBAAOK,EAAP,KAAoBC,EAApB,KACA,EAA0BN,mBAAS,WAAnC,mBAAOO,EAAP,KAAcC,EAAd,KAEAC,QAAQC,IAAIH,GAEZ,IAcMI,EACJ,yIAEIC,EAAS,uCAAG,WAAOD,GAAP,iBAAAE,EAAA,sEACOC,MAAMH,GADb,cACVI,EADU,gBAEGA,EAASC,OAFZ,OAEVA,EAFU,OAGhBV,EAAeU,EAAKC,QACpBR,QAAQC,IAAIM,EAAKC,QAJD,2CAAH,sDAWf,OAJAC,qBAAU,WACRN,EAAUD,KACT,CAACA,IAGF,qBAAKQ,UAAU,MAAf,SACE,wBAAQA,UAAU,aAAaC,MAAO,CAAEC,gBAAiBd,GAAzD,SACE,sBAAKe,GAAG,YAAYF,MAAO,CAAEb,MAAOA,GAApC,UACE,oBAAGe,GAAG,OAAN,UACE,cAAC,IAAD,CAAiBC,KAAMC,IAAaL,UAAU,UAC7ClB,KAEH,oBAAGqB,GAAG,SAAN,eAAkBnB,KAClB,sBAAKgB,UAAU,SAAf,UACE,mBACEG,GAAG,cACHG,KAAMC,UAAU,6CAAD,OACgCzB,EADhC,YACyCE,IAExDiB,MAAO,CAAEb,MAAOA,GALlB,SAOE,cAAC,IAAD,CAAiBgB,KAAMI,QAEzB,wBACEL,GAAG,YACHM,QAjDS,WACnB,IAAIC,EAAeC,KAAKC,MAAMD,KAAKE,SAAW3B,EAAY4B,QACtDC,EAAoBJ,KAAKC,MAAMD,KAAKE,SAAWlC,EAAWmC,QAC9D/B,EAASG,EAAYwB,GAAc5B,OACnCG,EAAUC,EAAYwB,GAAc1B,QACpCK,EAASV,EAAWoC,KA6CVd,MAAO,CAAEC,gBAAiBd,GAH5B,SAKE,0DCzDC4B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.e3d0df16.chunk.js","sourcesContent":["const colorArray = [\n  '#FF6633',\n  '#FFB399',\n  '#FF33FF',\n  '#FFFF99',\n  '#00B3E6',\n  '#E6B333',\n  '#3366E6',\n  '#999966',\n  '#99FF99',\n  '#B34D4D',\n  '#80B300',\n  '#809900',\n  '#E6B3B3',\n  '#6680B3',\n  '#66991A',\n  '#FF99E6',\n  '#CCFF1A',\n  '#FF1A66',\n  '#E6331A',\n  '#33FFCC',\n  '#66994D',\n  '#B366CC',\n  '#4D8000',\n  '#B33300',\n  '#CC80CC',\n  '#66664D',\n  '#991AFF',\n  '#E666FF',\n  '#4DB3FF',\n  '#1AB399',\n  '#E666B3',\n  '#33991A',\n  '#CC9999',\n  '#B3B31A',\n  '#00E680',\n  '#4D8066',\n  '#809980',\n  '#E6FF80',\n  '#1AFF33',\n  '#999933',\n  '#FF3380',\n  '#CCCC00',\n  '#66E64D',\n  '#4D80CC',\n  '#9900B3',\n  '#E64D66',\n  '#4DB380',\n  '#FF4D4D',\n  '#99E6E6',\n  '#6666FF',\n]\n\nexport default colorArray\n","import React, { useState, useEffect } from 'react'\nimport './App.scss'\nimport colorArray from './color'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faTwitter } from '@fortawesome/free-brands-svg-icons'\nimport { faQuoteLeft } from '@fortawesome/free-solid-svg-icons'\n\nfunction App() {\n  let quoteFirst = 'Winning isnâ€™t everything, but wanting to win is.'\n  let authorFirst = 'Vince Lombardi'\n  const [quote, setQuote] = useState(quoteFirst)\n  const [author, setAuthor] = useState(authorFirst)\n  const [quotesArray, setQuotesArray] = useState(null)\n  const [color, setColor] = useState('#FF6633')\n\n  console.log(color)\n\n  const randomQuotes = () => {\n    let randomNumber = Math.floor(Math.random() * quotesArray.length)\n    let randomNumberColor = Math.floor(Math.random() * colorArray.length)\n    setQuote(quotesArray[randomNumber].quote)\n    setAuthor(quotesArray[randomNumber].author)\n    setColor(colorArray[randomNumberColor])\n  }\n\n  // const quotesArray = [\n  //   { quotes: 'kamu bisa', author: 'ronny' },\n  //   { quotes: 'joss bro', author: 'budi' },\n  //   { quotes: 'gass polll', author: 'koe' },\n  // ]\n\n  const quotesDBUrl =\n    'https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json'\n\n  const fetchData = async (quotesDBUrl) => {\n    const response = await fetch(quotesDBUrl)\n    const json = await response.json()\n    setQuotesArray(json.quotes)\n    console.log(json.quotes)\n  }\n\n  useEffect(() => {\n    fetchData(quotesDBUrl)\n  }, [quotesDBUrl])\n\n  return (\n    <div className='App'>\n      <header className='App-header' style={{ backgroundColor: color }}>\n        <div id='quote-box' style={{ color: color }}>\n          <p id='text'>\n            <FontAwesomeIcon icon={faQuoteLeft} className='quote' />\n            {quote}\n          </p>\n          <p id='author'>- {author}</p>\n          <div className='bottom'>\n            <a\n              id='tweet-quote'\n              href={encodeURI(\n                `https://www.twitter.com/intent/tweet?text=${quote}-${author}`\n              )}\n              style={{ color: color }}\n            >\n              <FontAwesomeIcon icon={faTwitter} />\n            </a>\n            <button\n              id='new-quote'\n              onClick={randomQuotes}\n              style={{ backgroundColor: color }}\n            >\n              <span>New Quote</span>\n            </button>\n          </div>\n        </div>\n      </header>\n    </div>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}